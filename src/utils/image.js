// src/utils/image.js
const fs = require("fs");
const path = require("path");
const PImage = require("pureimage");
const Country = require("../models/country");
const { Op } = require("sequelize");

const CACHE_DIR = path.join(__dirname, "..", "cache");
const OUT_FILE = path.join(CACHE_DIR, "summary.png");
const TITLE = "World Countries & GDP Overview";

async function createSummaryImage() {
  // ensure cache dir
  if (!fs.existsSync(CACHE_DIR)) fs.mkdirSync(CACHE_DIR, { recursive: true });

  // fetch totals and top 5 (non-null estimated_gdp)
  const total = await Country.count();
  const top5 = await Country.findAll({
    where: { estimated_gdp: { [Op.not]: null } },
    order: [["estimated_gdp", "DESC"]],
    limit: 5,
    attributes: ["name", "estimated_gdp"],
  });

  const width = 1200;
  const height = 600;
  const img = PImage.make(width, height);
  const ctx = img.getContext("2d");

  // background
  ctx.fillStyle = "#ffffff";
  ctx.fillRect(0, 0, width, height);

  // title
  ctx.fillStyle = "#111111";
  ctx.font = "32px Sans"; // pureimage will try to render with a default font if none registered
  ctx.fillText(TITLE, 48, 64);

  // totals and timestamp
  ctx.font = "20px Sans";
  ctx.fillText(`Total countries: ${total}`, 48, 110);

  const now = new Date();
  ctx.fillText(`Last refreshed: ${now.toISOString()}`, 48, 140);

  // top 5 heading
  ctx.font = "22px Sans";
  ctx.fillText("Top 5 countries by estimated GDP", 48, 190);

  // list top 5
  ctx.font = "18px Sans";
  let y = 230;
  top5.forEach((c, i) => {
    const gdp = Number(c.estimated_gdp || 0).toLocaleString(undefined, {
      maximumFractionDigits: 2,
    });
    ctx.fillText(`${i + 1}. ${c.name} â€” ${gdp}`, 64, y);
    y += 36;
  });

  // footer / small note
  ctx.font = "14px Sans";
  ctx.fillStyle = "#333333";
  ctx.fillText("Generated by Country Currency & Exchange API", 48, height - 40);

  // write PNG
  return new Promise((resolve, reject) => {
    const out = fs.createWriteStream(OUT_FILE);
    PImage.encodePNGToStream(img, out)
      .then(() => resolve(OUT_FILE))
      .catch((err) => reject(err));
  });
}

module.exports = { createSummaryImage, OUT_FILE };
